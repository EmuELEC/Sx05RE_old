#!/bin/bash
################################################################################
#      This file is part of Alex@ELEC - http://www.alexelec.in.ua
#      Copyright (C) 2011-2017 Alexandr Zuyev (alex@alexelec.in.ua)
################################################################################

unset _CACHE_PACKAGE_LOCAL _CACHE_PACKAGE_GLOBAL

. config/options $1

show_config

setup_toolchain target

$SCRIPTS/checkdeps
$SCRIPTS/build toolchain
$SCRIPTS/build squashfs:host
$SCRIPTS/build dosfstools:host
$SCRIPTS/build fakeroot:host
$SCRIPTS/build kmod:host
$SCRIPTS/build mtools:host
$SCRIPTS/build populatefs:host

BUILD_DATE=`date +%Y%m%d`

GIT_HASH=$(git rev-parse HEAD)

# Get origin url, fix git:// and git@github.com: urls if necessary
ORIGIN_URL="$(git remote -v | awk '$1 == "origin" { print $2 }' | head -1 | sed 's#\.git$##;s#^git:#https:#;s#^git@github\.com:#https://github.com/#')"

if [ -z "$DEVICE" ]; then
  TARGET_VERSION="$PROJECT.$TARGET_ARCH-$ALEXELEC_VERSION"
else
  TARGET_VERSION="$PROJECT.$DEVICE.$TARGET_ARCH-$ALEXELEC_VERSION"
fi
IMAGE_NAME="$DISTRONAME-$TARGET_VERSION"

# Set Amlogic update package name
AML_UPDATE_NAME="$IMAGE_NAME"

# setup fakeroot
rm -rf $FAKEROOT_SCRIPT   # remove $FAKEROOT_SCRIPT if it exist
touch $FAKEROOT_SCRIPT    # create an empty $FAKEROOT_SCRIPT
chmod +x $FAKEROOT_SCRIPT # make $FAKEROOT_SCRIPT executable
echo "chown -R 0:0 $INSTALL" >> $FAKEROOT_SCRIPT

# clean old install dirs
rm -rf $INSTALL
rm -rf $STAMPS_INSTALL
mkdir -p $INSTALL

# create baselayout
mkdir -p $INSTALL/bin
mkdir -p $INSTALL/etc
mkdir -p $INSTALL/lib
mkdir -p $INSTALL/sbin
mkdir -p $INSTALL/dev
mkdir -p $INSTALL/proc
mkdir -p $INSTALL/run
mkdir -p $INSTALL/sys
mkdir -p $INSTALL/tmp
mkdir -p $INSTALL/usr
mkdir -p $INSTALL/var
mkdir -p $INSTALL/flash
mkdir -p $INSTALL/storage
ln -sf /var/media $INSTALL/media

echo "$TARGET_VERSION" > $INSTALL/etc/release

# create /etc/os-release
echo -e "NAME=\"$DISTRONAME\"" > $INSTALL/etc/os-release
if [ -z "$DEVICE" ]; then
  echo -e "VERSION=\"$ALEXELEC_VERSION\"" >> $INSTALL/etc/os-release
else
  echo -e "VERSION=\"$DEVICE-$ALEXELEC_VERSION\"" >> $INSTALL/etc/os-release
fi
echo -e "ID=\"alexelec\"" >> $INSTALL/etc/os-release
echo -e "VERSION_ID=\"$OS_VERSION\"" >> $INSTALL/etc/os-release
echo -e "PRETTY_NAME=\"$DISTRONAME ($ALEXELEC_BUILD) - Version: $ALEXELEC_VERSION\"" >> $INSTALL/etc/os-release
echo -e "HOME_URL=\"https://alexelec.in.ua\"" >> $INSTALL/etc/os-release
echo -e "BUG_REPORT_URL=\"$ORIGIN_URL\"" >> $INSTALL/etc/os-release
echo -e "BUILD_ID=\"$GIT_HASH\"" >> $INSTALL/etc/os-release
echo -e "ALEXELEC_ARCH=\"$PROJECT.$TARGET_ARCH\"" >> $INSTALL/etc/os-release
echo -e "ALEXELEC_BUILD=\"$ALEXELEC_BUILD\"" >> $INSTALL/etc/os-release

# create /etc/issue
echo "$GREETING0" >  $INSTALL/etc/issue
echo "$GREETING1" >> $INSTALL/etc/issue
echo "$GREETING2" >> $INSTALL/etc/issue
echo "$GREETING3" >> $INSTALL/etc/issue
echo "$GREETING4" >> $INSTALL/etc/issue
echo "$DISTRONAME ($ALEXELEC_BUILD) Version: $ALEXELEC_VERSION" >> $INSTALL/etc/issue

ln -sf /etc/issue $INSTALL/etc/motd

# Basissystem...
$SCRIPTS/install libc
$SCRIPTS/install gcc
$SCRIPTS/install linux
$SCRIPTS/install linux-drivers
$SCRIPTS/install linux-firmware
$SCRIPTS/install $BOOTLOADER
$SCRIPTS/install busybox
$SCRIPTS/install util-linux
$SCRIPTS/install corefonts
$SCRIPTS/install network

# Graphic support
[ ! "$DISPLAYSERVER" = "no" ] && $SCRIPTS/install $DISPLAYSERVER

# Multimedia support
[ ! "$MEDIACENTER" = "no" ] && $SCRIPTS/install mediacenter

# Sound support
[ "$ALSA_SUPPORT" = "yes" ] && $SCRIPTS/install alsa

# Automounter support
[ "$UDEVIL" = "yes" ] && $SCRIPTS/install udevil

# NTFS 3G support
[ "$EXFAT" = "yes" ] && $SCRIPTS/install fuse-exfat

# NTFS 3G support
[ "$NTFS3G" = "yes" ] && $SCRIPTS/install ntfs-3g_ntfsprogs

# Remote support
[ "$REMOTE_SUPPORT" = "yes" ] && $SCRIPTS/install remote

# Virtual image creation support
[ "$PROJECT" = Virtual ] && $SCRIPTS/install virtual

# Installer support
[ "$INSTALLER_SUPPORT" = "yes" ] && $SCRIPTS/install installer

# Devtools... (not for Release)
[ "$TESTING" = "yes" ] && $SCRIPTS/install testing

# Install gdb in all builds, including releases
$SCRIPTS/install debug

# OEM packages
[ "$OEM_SUPPORT" = "yes" ] && $SCRIPTS/install oem

# copy project related files to filesystem
if [ -d "$PROJECT_DIR/$PROJECT/filesystem" ]; then
  cp -PR $PROJECT_DIR/$PROJECT/filesystem/* $INSTALL
  # install project specific systemd services
  for service in $PROJECT_DIR/$PROJECT/filesystem/usr/lib/systemd/system/*.service ; do
    if [ -f "$service" ] ; then
      enable_service $(basename $service)
    fi
  done
fi

# copy board related files to filesystem
if [ -n "$DEVICE" -a -d "$PROJECT_DIR/$PROJECT/devices/$DEVICE/filesystem" ]; then
  cp -PR $PROJECT_DIR/$PROJECT/devices/$DEVICE/filesystem/* $INSTALL
  # install device specific systemd services
  for service in $PROJECT_DIR/$PROJECT/devices/$DEVICE/filesystem/usr/lib/systemd/system/*.service ; do
    if [ -f "$service" ] ; then
      enable_service $(basename $service)
    fi
  done
fi

# run depmod
MODVER=`ls $BUILD/linux-*/.install_pkg/lib/modules`

# move original modules dir
mv -f $INSTALL/lib/modules/$MODVER $INSTALL/lib/modules/$MODVER-core
ln -sf /storage/.modules/$MODVER $INSTALL/lib/modules/$MODVER

# Core
find $INSTALL/lib/modules/$MODVER-core/ -name *.ko | \
  sed -e "s,$INSTALL/lib/modules/$MODVER-core/,," > $INSTALL/lib/modules/$MODVER-core/modules.order
$ROOT/$TOOLCHAIN/bin/depmod -b $INSTALL $MODVER-core 2> /dev/null

# Media_Build
if [ -d "$INSTALL/lib/modules/$MODVER-mb" ]; then
  find $INSTALL/lib/modules/$MODVER-mb/ -name *.ko | \
    sed -e "s,$INSTALL/lib/modules/$MODVER-mb/,," > $INSTALL/lib/modules/$MODVER-mb/modules.order
  $ROOT/$TOOLCHAIN/bin/depmod -b $INSTALL $MODVER-mb 2> /dev/null
fi

# Media_Build_CrazyCat
if [ -d "$INSTALL/lib/modules/$MODVER-mbcc" ]; then
  find $INSTALL/lib/modules/$MODVER-mbcc/ -name *.ko | \
    sed -e "s,$INSTALL/lib/modules/$MODVER-mbcc/,," > $INSTALL/lib/modules/$MODVER-mbcc/modules.order
  $ROOT/$TOOLCHAIN/bin/depmod -b $INSTALL $MODVER-mbcc 2> /dev/null
fi

# S2-liplianin
if [ -d "$INSTALL/lib/modules/$MODVER-s2" ]; then
  find $INSTALL/lib/modules/$MODVER-s2/ -name *.ko | \
    sed -e "s,$INSTALL/lib/modules/$MODVER-s2/,," > $INSTALL/lib/modules/$MODVER-s2/modules.order
  $ROOT/$TOOLCHAIN/bin/depmod -b $INSTALL $MODVER-s2 2> /dev/null
fi

# strip kernel modules
if [ "$TARGET_KERNEL_ARCH" = "arm64" -a "$TARGET_ARCH" = "arm" ]; then
  STRIP=$ROOT/$TOOLCHAIN/lib/gcc-linaro-aarch64-linux-gnu/bin/aarch64-linux-gnu-strip
fi
for MOD in `find $INSTALL/lib/modules/ -type f -name *.ko`; do
  $STRIP --strip-debug $MOD
done

# make target dir
mkdir -p $TARGET_IMG
rm -rf $TARGET_IMG/$IMAGE_NAME.kernel

# copy kernel to target dir
if [ "$BUILD_ANDROID_BOOTIMG" = "yes" ]; then
  echo "Building Amlogic DeviceTreeBlobs and injecting them to kernel arch: $TARGET_KERNEL_ARCH ..."
  pushd "$BUILD/linux-$(kernel_version)" > /dev/null
  rm -rf arch/$TARGET_KERNEL_ARCH/boot/dts/amlogic/*.dtb arch/$TARGET_KERNEL_ARCH/boot/dtb.img arch/$TARGET_KERNEL_ARCH/boot/boot.img
  if [ "$TARGET_KERNEL_ARCH" = "arm64" -a "$TARGET_ARCH" = "arm" ]; then
    PATH=$ROOT/$TOOLCHAIN/lib/gcc-linaro-aarch64-linux-gnu/bin/:$PATH
    TARGET_PREFIX=aarch64-linux-gnu-
  fi
  for extra_target in $KERNEL_UBOOT_EXTRA_TARGET; do
    echo "  make: $extra_target ..."
    LDFLAGS="" make $extra_target > /dev/null
  done
  DTB_BLOBS=($(ls arch/$TARGET_KERNEL_ARCH/boot/dts/amlogic/*.dtb 2>/dev/null || true))
  DTB_BLOBS_COUNT="${#DTB_BLOBS[@]}"
  DTB_BLOB_OUTPUT="arch/$TARGET_KERNEL_ARCH/boot/dtb.img"
  if [ "$DTB_BLOBS_COUNT" -gt 1 ]; then
    $ROOT/tools/dtbTool/dtbTool -o $DTB_BLOB_OUTPUT -p scripts/dtc/ arch/$TARGET_KERNEL_ARCH/boot/dts/amlogic/
    ANDROID_BOOTIMG_SECOND="--second $DTB_BLOB_OUTPUT"
  elif [ "$DTB_BLOBS_COUNT" -eq 1 ]; then
    cp -f $DTB_BLOBS $DTB_BLOB_OUTPUT
    ANDROID_BOOTIMG_SECOND="--second $DTB_BLOBS"
  else
    ANDROID_BOOTIMG_SECOND=""
  fi
  echo "  ANDROID_BOOTIMG_SECOND: $ANDROID_BOOTIMG_SECOND"
  mkbootimg --kernel arch/$TARGET_KERNEL_ARCH/boot/$KERNEL_TARGET --ramdisk $ROOT/$BUILD/image/initramfs.cpio \
      $ANDROID_BOOTIMG_SECOND $ANDROID_BOOTIMG_OPTIONS --output arch/$TARGET_KERNEL_ARCH/boot/boot.img
  if [ -f "$DTB_BLOB_OUTPUT" ]; then
    cp -f $DTB_BLOB_OUTPUT $TARGET_IMG/$IMAGE_NAME.dtb
  fi
  echo "...done"
  popd > /dev/null
  cp -PR $BUILD/linux-$(kernel_version)/arch/$TARGET_KERNEL_ARCH/boot/boot.img $TARGET_IMG/$IMAGE_NAME.kernel
else
  cp -PR $BUILD/linux-$(kernel_version)/arch/$TARGET_KERNEL_ARCH/boot/$KERNEL_TARGET $TARGET_IMG/$IMAGE_NAME.kernel
fi
chmod 0644 $TARGET_IMG/$IMAGE_NAME.kernel

# create squashfs file
if [ -z "$SQUASHFS_COMPRESSION" ]; then
  SQUASHFS_COMPRESSION="gzip"
fi

echo "rm -rf \"$TARGET_IMG/$IMAGE_NAME.system\"" >> $FAKEROOT_SCRIPT
echo "$ROOT/$TOOLCHAIN/bin/mksquashfs \"$BUILD/image/system\" \"$TARGET_IMG/$IMAGE_NAME.system\" -noappend -comp $SQUASHFS_COMPRESSION" >> $FAKEROOT_SCRIPT

# run fakeroot
$ROOT/$TOOLCHAIN/bin/fakeroot -- $FAKEROOT_SCRIPT
rm -rf $FAKEROOT_SCRIPT

# set permissions
chmod 0644 $TARGET_IMG/$IMAGE_NAME.system

if [ "$1" = "release" -o "$1" = "mkimage" -o "$1" = "amlpkg" ]; then

  RELEASE_DIR="target/$IMAGE_NAME"

  if [ -n "$DEVICE" -a -d "$PROJECT_DIR/$PROJECT/devices/$DEVICE/install" ]; then
    INSTALL_SRC_DIR="$PROJECT_DIR/$PROJECT/devices/$DEVICE/install"
  else
    INSTALL_SRC_DIR="$PROJECT_DIR/$PROJECT/install"
  fi

  MKIMAGE_TOOL_CMD="$(which mkimage) -A arm -O linux -T script -C none -d"

  # cleanup
  rm -rf $RELEASE_DIR

  # create release dir
  mkdir -p $RELEASE_DIR

  # remove n previous created release image
  rm -rf $TARGET_IMG/$IMAGE_NAME.img.gz
  if [ -n "$BOOTLOADER" ]; then

    BOOTLOADER_DIR=""
    if [ -z "$BOOTLOADER_DIR" -a -d $PROJECT_DIR/$PROJECT/packages ]; then
      BOOTLOADER_DIR=`find $PROJECT_DIR/$PROJECT/packages -type d -name $BOOTLOADER 2>/dev/null`
    fi

    if [ -z "$BOOTLOADER_DIR" -o ! -d "$BOOTLOADER_DIR" ]; then
      BOOTLOADER_DIR=`find $PACKAGES -type d -name $BOOTLOADER 2>/dev/null`
    fi

    if [ -d "$BOOTLOADER_DIR"/files ]; then
      cp -R $BOOTLOADER_DIR/files/* $RELEASE_DIR
    fi

    if [ -n "$DEVICE" -a -f $PROJECT_DIR/$PROJECT/devices/$DEVICE/bootloader/release ]; then
      . $PROJECT_DIR/$PROJECT/devices/$DEVICE/bootloader/release
    elif [ -f $PROJECT_DIR/$PROJECT/bootloader/release ]; then
      . $PROJECT_DIR/$PROJECT/bootloader/release
    elif [ -f "$BOOTLOADER_DIR"/release ]; then
      . $BOOTLOADER_DIR/release
    fi
  fi

  cp $ROOT/README* $RELEASE_DIR
  cp $ROOT/CHANGELOG* $RELEASE_DIR
  echo "$TARGET_VERSION" > $RELEASE_DIR/RELEASE

  if [ -n "$MEDIACENTER" ] ; then
    echo "Kodi commit: `scripts/git_version $MEDIACENTER`" >> $RELEASE_DIR/RELEASE
  fi

  mkdir -p $RELEASE_DIR/licenses
  cp $ROOT/licenses/* $RELEASE_DIR/licenses

  mkdir -p $RELEASE_DIR/target
  cp $TARGET_IMG/$IMAGE_NAME.system $RELEASE_DIR/target/SYSTEM
  cp $TARGET_IMG/$IMAGE_NAME.kernel $RELEASE_DIR/target/KERNEL

  # create md5sum's
  ( cd $RELEASE_DIR;
    md5sum -t target/SYSTEM > target/SYSTEM.md5;
    md5sum -t target/KERNEL > target/KERNEL.md5;
  )

  # create target directory
  mkdir -p $TARGET_IMG

  # remove an previous created release tarball
  rm -rf $TARGET_IMG/$IMAGE_NAME.tar

  # create release tarball
  tar cf $TARGET_IMG/$IMAGE_NAME.tar -C target $IMAGE_NAME

  # create image files if requested
  if [[ ( "$1" = "amlpkg" || "$1" = "noobs" || "$1" = "mkimage" ) && -n "$BOOTLOADER" ]]; then
    # projects can set KERNEL_NAME (kernel.img)
    if [ -z "$KERNEL_NAME" ] ; then
      KERNEL_NAME="KERNEL"
    fi

    UBOOT_SYSTEM=""

    # variables used in image script must be passed
    env \
      PATH="$PATH:/sbin" \
      ROOT="$ROOT" \
      TOOLCHAIN="$TOOLCHAIN" \
      PROJECT_DIR="$PROJECT_DIR" \
      PROJECT="$PROJECT" \
      DISTRO="$DISTRO" \
      TARGET_IMG="$TARGET_IMG" \
      IMAGE_NAME="$IMAGE_NAME" \
      INSTALL_SRC_DIR="$INSTALL_SRC_DIR" \
      BOOTLOADER="$BOOTLOADER" \
      KERNEL_NAME="$KERNEL_NAME" \
      MKIMAGE_TOOL_CMD="$MKIMAGE_TOOL_CMD" \
      RELEASE_DIR="$RELEASE_DIR" \
      UUID_SYSTEM="$(uuidgen)" \
      UUID_STORAGE="$(uuidgen)" \
      UBOOT_SYSTEM="$UBOOT_SYSTEM" \
      EXTRA_CMDLINE="$EXTRA_CMDLINE" \
      SYSTEM_SIZE="$SYSTEM_SIZE" \
      SYSTEM_PART_START="$SYSTEM_PART_START" \
      $SCRIPTS/mkimage
  fi

  # cleanup release dir
  rm -rf $RELEASE_DIR

  # create Amlogic ZIP update and auto-install packages if requested
  if [ "$1" = "amlpkg" ]; then
    echo "Creating Amlogic ZIP update package"

    AML_PKG_DIR="$RELEASE_DIR/ampl-pkg"

    # create package directory
    mkdir -p "$AML_PKG_DIR"

    # copy system and kernel images
    mkdir -p "$AML_PKG_DIR/system"
    cp $TARGET_IMG/$IMAGE_NAME.system $AML_PKG_DIR/system/SYSTEM
    cp $TARGET_IMG/$IMAGE_NAME.kernel $AML_PKG_DIR/KERNEL

    # copy update-binary and updater-script
    META_INF_DIR="$AML_PKG_DIR/META-INF/com/google/android"
    mkdir -p "$META_INF_DIR"
    cp $INSTALL_SRC_DIR/update-binary $META_INF_DIR
    cp $INSTALL_SRC_DIR/updater-script $META_INF_DIR

    # copy other files if any
    if [ -d "$INSTALL_SRC_DIR/files" ]; then
      cp -PR $INSTALL_SRC_DIR/files/* $AML_PKG_DIR
    fi

    # copy device tree image if any
    if [ -f "$INSTALL/usr/share/bootloader/dtb.img" ]; then
      cp "$INSTALL/usr/share/bootloader/dtb.img" $AML_PKG_DIR/dtb.img
    fi

    # create the update package
    pushd "$AML_PKG_DIR" > /dev/null
    zip -rq update.zip *

    # sign the update package
    echo "Signing the update package"
    mkdir -p sign
    SIGNAPK_DIR="$ROOT/tools/signapk"
        java -Xmx2048m -jar $SIGNAPK_DIR/signapk.jar -w $SIGNAPK_DIR/testkey.x509.pem $SIGNAPK_DIR/testkey.pk8 update.zip sign/$AML_UPDATE_NAME-update.zip

    # create the auto-install package
    echo "Creating Amlogic ZIP auto-install package"
    pushd sign > /dev/null
        echo --update_package=/sdcard/$AML_UPDATE_NAME-update.zip > factory_update_param.aml
    echo --wipe_data >> factory_update_param.aml
    echo --wipe_cache >> factory_update_param.aml
    if [ -f "$INSTALL_SRC_DIR/files/recovery.img" ]; then
      cp $INSTALL_SRC_DIR/files/recovery.img .
    fi

    if [ -f $INSTALL_SRC_DIR/files/aml_autoscript ]; then
      cp $INSTALL_SRC_DIR/files/aml_autoscript .
    fi

    # copy device tree image if any
    if [ -f "$ROOT/$INSTALL/usr/share/bootloader/dtb.img" ]; then
      cp "$ROOT/$INSTALL/usr/share/bootloader/dtb.img" .
    fi

    zip -q $TARGET_IMG/$IMAGE_NAME.zip *

    popd > /dev/null
    popd > /dev/null

  fi

  if [ -d $RELEASE_DIR ]; then
    # cleanup release dir
    rm -rf $RELEASE_DIR
  fi
  rm -f $TARGET_IMG/$IMAGE_NAME.system
  rm -f $TARGET_IMG/$IMAGE_NAME.kernel
  rm -f $TARGET_IMG/$IMAGE_NAME.dtb

fi
